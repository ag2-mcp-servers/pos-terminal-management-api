# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:08:41+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic

from models import (
    AssignTerminalsRequest,
    AssignTerminalsResponse,
    FindTerminalRequest,
    FindTerminalResponse,
    GetStoresUnderAccountRequest,
    GetStoresUnderAccountResponse,
    GetTerminalDetailsRequest,
    GetTerminalDetailsResponse,
    GetTerminalsUnderAccountRequest,
    GetTerminalsUnderAccountResponse,
    ServiceError,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.\n\nFor more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).\n\n## Authentication\nEach request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:\n\n```\ncurl\n-H "Content-Type: application/json" \\\n-H "X-API-Key: Your_API_key" \\\n...\n```\nNote that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n## Versioning\nTerminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount\n```\nWhen using versioned endpoints, Boolean response values are returned in string format: `"true"` or `"false"`.\nIf you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='POS Terminal Management API',
    version='1',
    servers=[{'url': 'https://postfmapi-test.adyen.com/postfmapi/terminal/v1'}],
)


@app.post(
    '/assignTerminals',
    description=""" Assigns one or more payment terminals to a merchant account or a store. You can also use this endpoint to reassign terminals between merchant accounts or stores, and to unassign a terminal and return it to company inventory. """,
    tags=['terminal_info_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_assign_terminals(body: AssignTerminalsRequest = None):
    """
    Assign terminals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/findTerminal',
    description=""" Returns the company account, merchant account, or store that a payment terminal is assigned to. """,
    tags=['terminal_info_management', 'store_info_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_find_terminal(body: FindTerminalRequest = None):
    """
    Get the account or store of a terminal
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getStoresUnderAccount',
    description=""" Returns a list of stores associated with a company account or a merchant account, including the status of each store. """,
    tags=['store_info_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_get_stores_under_account(body: GetStoresUnderAccountRequest = None):
    """
    Get the stores of an account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getTerminalDetails',
    description=""" Returns the details of a payment terminal, including where the terminal is assigned to. The response returns the same details that are provided in the terminal list in your Customer Area and in the Terminal Fleet report. """,
    tags=['terminal_info_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_get_terminal_details(body: GetTerminalDetailsRequest = None):
    """
    Get the details of a terminal
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getTerminalsUnderAccount',
    description=""" Returns a list of payment terminals associated with a company account, merchant account, or store. The response shows whether the terminals are in the inventory, or in-store (ready for boarding or already boarded). """,
    tags=['terminal_info_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_get_terminals_under_account(body: GetTerminalsUnderAccountRequest = None):
    """
    Get the list of terminals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
