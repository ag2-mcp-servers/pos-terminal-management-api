# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:08:41+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class Address(BaseModel):
    city: Optional[str] = None
    countryCode: Optional[str] = None
    postalCode: Optional[str] = None
    stateOrProvince: Optional[str] = None
    streetAddress: Optional[str] = None
    streetAddress2: Optional[str] = None


class AssignTerminalsRequest(BaseModel):
    companyAccount: str = Field(
        ...,
        description='Your company account. To return terminals to the company inventory, specify only this parameter and the `terminals`.',
    )
    merchantAccount: Optional[str] = Field(
        None,
        description='Name of the merchant account. Specify this parameter to assign terminals to this merchant account or to a store under this merchant account.',
    )
    merchantInventory: Optional[bool] = Field(
        None,
        description='Boolean that indicates if you are assigning the terminals to the merchant inventory. Do not use when assigning terminals to a store. Required when assigning the terminal to a merchant account.\n\n- Set this to **true** to assign the terminals to the merchant inventory. This also means that the terminals cannot be boarded.\n\n- Set this to **false** to assign the terminals to the merchant account as in-store terminals. This makes the terminals ready to be boarded and to process payments through the specified merchant account.',
    )
    store: Optional[str] = Field(
        None,
        description='The store code of the store that you want to assign the terminals to.',
    )
    terminals: List[str] = Field(
        ...,
        description='Array containing a list of terminal IDs that you want to assign or reassign to the merchant account or store, or that you want to return to the company inventory.\n\nFor example, `["V400m-324689776","P400Plus-329127412"]`.',
    )


class AssignTerminalsResponse(BaseModel):
    results: Dict[str, str] = Field(
        ...,
        description='Array that returns a list of the terminals, and for each terminal the result of assigning it to an account or store.\n\nThe results can be: \n\n - `Done`: The terminal has been assigned.\n\n - `AssignmentScheduled`: The terminal will be assigned asynschronously.\n\n - `RemoveConfigScheduled`: The terminal was previously assigned and boarded. Wait for the terminal to synchronize with the Adyen platform. For more information, refer to [Reassigning boarded terminals](https://docs.adyen.com/point-of-sale/managing-terminals/assign-terminals#reassign-boarded-terminals).\n\n - `Error`: There was an error when assigning the terminal. ',
    )


class FindTerminalRequest(BaseModel):
    terminal: str = Field(
        ...,
        description='The unique terminal ID in the format `[Device model]-[Serial number]`. \n\nFor example, **V400m-324689776**.',
    )


class FindTerminalResponse(BaseModel):
    companyAccount: str = Field(
        ...,
        description='The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.',
    )
    merchantAccount: Optional[str] = Field(
        None,
        description="The merchant account that the terminal is associated with. If the response doesn't contain a `store` the terminal is assigned to this merchant account.",
    )
    merchantInventory: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the terminal is assigned to the merchant inventory. This is returned when the terminal is assigned to a merchant account.\n\n- If **true**, this indicates that the terminal is in the merchant inventory. This also means that the terminal cannot be boarded.\n\n- If **false**, this indicates that the terminal is assigned to the merchant account as an in-store terminal. This means that the terminal is ready to be boarded, or is already boarded.',
    )
    store: Optional[str] = Field(
        None,
        description='The store code of the store that the terminal is assigned to.',
    )
    terminal: str = Field(..., description='The unique terminal ID.')


class GetStoresUnderAccountRequest(BaseModel):
    companyAccount: str = Field(
        ...,
        description='The company account. If you only specify this parameter, the response includes the stores of all merchant accounts that are associated with the company account.',
    )
    merchantAccount: Optional[str] = Field(
        None,
        description='The merchant account. With this parameter, the response only includes the stores of the specified merchant account.',
    )


class GetTerminalDetailsRequest(BaseModel):
    terminal: str = Field(
        ...,
        description='The unique terminal ID in the format `[Device model]-[Serial number]`. \n\nFor example, **V400m-324689776**.',
    )


class TerminalStatus(Enum):
    OnlineLast1Day = 'OnlineLast1Day'
    OnlineLast2Days = 'OnlineLast2Days'
    OnlineLast3Days = 'OnlineLast3Days'
    OnlineLast4Days = 'OnlineLast4Days'
    OnlineLast5Days = 'OnlineLast5Days'
    OnlineLast6Days = 'OnlineLast6Days'
    OnlineLast7Days = 'OnlineLast7Days'
    OnlineToday = 'OnlineToday'
    ReAssignToInventoryPending = 'ReAssignToInventoryPending'
    ReAssignToMerchantInventoryPending = 'ReAssignToMerchantInventoryPending'
    ReAssignToStorePending = 'ReAssignToStorePending'
    SwitchedOff = 'SwitchedOff'


class GetTerminalsUnderAccountRequest(BaseModel):
    companyAccount: str = Field(
        ...,
        description='Your company account. If you only specify this parameter, the response includes all terminals at all account levels.',
    )
    merchantAccount: Optional[str] = Field(
        None,
        description="The merchant account. This is required if you are retrieving the terminals assigned to a store.If you don't specify a `store` the response includes the terminals assigned to the specified merchant account and the terminals assigned to the stores under this merchant account.",
    )
    store: Optional[str] = Field(
        None,
        description='The store code of the store. With this parameter, the response only includes the terminals assigned to the specified store.',
    )


class ServiceError(BaseModel):
    errorCode: Optional[str] = Field(
        None, description='The error code mapped to the error message.'
    )
    errorType: Optional[str] = Field(None, description='The category of the error.')
    message: Optional[str] = Field(
        None, description='A short explanation of the issue.'
    )
    pspReference: Optional[str] = Field(
        None, description='The PSP reference of the payment.'
    )
    status: Optional[int] = Field(None, description='The HTTP response status.')


class Store(BaseModel):
    address: Optional[Address] = Field(None, description='The address of the store.')
    description: Optional[str] = Field(
        None, description='The description of the store.'
    )
    inStoreTerminals: Optional[List[str]] = Field(
        None, description='The list of terminals assigned to the store.'
    )
    merchantAccountCode: Optional[str] = Field(
        None, description='The code of the merchant account.'
    )
    status: Optional[str] = Field(
        None,
        description='The status of the store:\n\n- `PreActive`: the store has been created, but not yet activated. \n\n- `Active`: the store has been activated. This means you can process payments for this store. \n\n- `Inactive`: the store is currently not active. \n\n- `InactiveWithModifications`: the store is currently not active, but payment modifications such as refunds are possible. \n\n- `Closed`: the store has been closed. ',
    )
    store: str = Field(..., description='The code of the store.')


class GetStoresUnderAccountResponse(BaseModel):
    stores: Optional[List[Store]] = Field(
        None,
        description='Array that returns a list of all stores for the specified merchant account, or for all merchant accounts under the company account.',
    )


class GetTerminalDetailsResponse(BaseModel):
    bluetoothIp: Optional[str] = Field(
        None, description='The Bluetooth IP address of the terminal.'
    )
    bluetoothMac: Optional[str] = Field(
        None, description='The Bluetooth MAC address of the terminal.'
    )
    companyAccount: str = Field(
        ...,
        description='The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.',
    )
    country: Optional[str] = Field(
        None, description='The country where the terminal is used.'
    )
    deviceModel: Optional[str] = Field(
        None, description='The model name of the terminal.'
    )
    dhcpEnabled: Optional[bool] = Field(
        None,
        description='Indicates whether assigning IP addresses through a DHCP server is enabled on the terminal.',
    )
    displayLabel: Optional[str] = Field(
        None,
        description='The label shown on the status bar of the display. This label (if any) is specified in your Customer Area.',
    )
    ethernetIp: Optional[str] = Field(
        None, description="The terminal's IP address in your Ethernet network."
    )
    ethernetMac: Optional[str] = Field(
        None, description="The terminal's MAC address in your Ethernet network."
    )
    firmwareVersion: Optional[str] = Field(
        None, description='The software release currently in use on the terminal.'
    )
    iccid: Optional[str] = Field(
        None,
        description='The integrated circuit card identifier (ICCID) of the SIM card in the terminal.',
    )
    lastActivityDateTime: Optional[datetime] = Field(
        None,
        description='Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.',
    )
    lastTransactionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.',
    )
    linkNegotiation: Optional[str] = Field(
        None,
        description='The Ethernet link negotiation that the terminal uses: \n\n- `auto`: Auto-negotiation\n\n- `100full`: 100 Mbps full duplex',
    )
    merchantAccount: Optional[str] = Field(
        None,
        description="The merchant account that the terminal is associated with. If the response doesn't contain a `store` the terminal is assigned to this merchant account.",
    )
    merchantInventory: Optional[bool] = Field(
        None,
        description='Boolean that indicates if the terminal is assigned to the merchant inventory. This is returned when the terminal is assigned to a merchant account.\n\n- If **true**, this indicates that the terminal is in the merchant inventory. This also means that the terminal cannot be boarded.\n\n- If **false**, this indicates that the terminal is assigned to the merchant account as an in-store terminal. This means that the terminal is ready to be boarded, or is already boarded.',
    )
    permanentTerminalId: Optional[str] = Field(
        None, description='The permanent terminal ID.'
    )
    serialNumber: Optional[str] = Field(
        None, description='The serial number of the terminal.'
    )
    simStatus: Optional[str] = Field(
        None,
        description='On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal: ACTIVE or INVENTORY.',
    )
    store: Optional[str] = Field(
        None,
        description='The store code of the store that the terminal is assigned to.',
    )
    storeDetails: Optional[Store] = Field(
        None, description='The store that the terminal is assigned to.'
    )
    terminal: str = Field(..., description='The unique terminal ID.')
    terminalStatus: Optional[TerminalStatus] = Field(
        None,
        description='The status of the terminal: \n\n- `OnlineToday`, `OnlineLast1Day`, `OnlineLast2Days` etcetera to `OnlineLast7Days`: Indicates when in the past week the terminal was last online. \n\n- `SwitchedOff`: Indicates it was more than a week ago that the terminal was last online. \n\n- `ReAssignToInventoryPending`, `ReAssignToStorePending`, `ReAssignToMerchantInventoryPending`: Indicates the terminal is scheduled to be reassigned.',
    )
    wifiIp: Optional[str] = Field(
        None, description="The terminal's IP address in your Wi-Fi network."
    )
    wifiMac: Optional[str] = Field(
        None, description="The terminal's MAC address in your Wi-Fi network."
    )


class MerchantAccount(BaseModel):
    inStoreTerminals: Optional[List[str]] = Field(
        None,
        description='List of terminals assigned to this merchant account as in-store terminals. This means that the terminal is ready to be boarded, or is already boarded.',
    )
    inventoryTerminals: Optional[List[str]] = Field(
        None,
        description='List of terminals assigned to the inventory of this merchant account.',
    )
    merchantAccount: str = Field(..., description='The merchant account.')
    stores: Optional[List[Store]] = Field(
        None, description='Array of stores under this merchant account.'
    )


class GetTerminalsUnderAccountResponse(BaseModel):
    companyAccount: str = Field(..., description='Your company account.')
    inventoryTerminals: Optional[List[str]] = Field(
        None,
        description='Array that returns a list of all terminals that are in the inventory of the company account.',
    )
    merchantAccounts: Optional[List[MerchantAccount]] = Field(
        None,
        description='Array that returns a list of all merchant accounts belonging to the company account.',
    )
